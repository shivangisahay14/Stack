class MyCircularQueue {
private:
    int front, rear, SIZE,cnt;
    vector <int> buffer;
public:
    MyCircularQueue(int k): buffer(k, 0), front(0), rear(-1), SIZE(k),cnt(0) {
        
    }
    
    bool enQueue(int value) {
        if(isFull()){
            return false;
            
        }
        
        rear=(rear+1)%SIZE;
        buffer[rear]=value;
        cnt++;
        return true;              
             
        
        
    }
    
    bool deQueue() {
        if(isEmpty()){
            return false;
        }
        
        front=(front+1)%SIZE;
        cnt--;
        return true;
        
    }
    
    int Front() {
        if(isEmpty()) return -1;
        
        return buffer[front];        
        
    }
    
    int Rear() {
        if(isEmpty()) return -1;
        return buffer[rear];
        
    }
    
    bool isEmpty() {
        
        return (cnt==0);
        
    }
    
    bool isFull() {
        
        return (cnt==SIZE);
        
    }
};

Array Implementation:
class MyCircularQueue {
private:
    int front = 0,last = -1,sz=0,_k=0,*arr;
public:
    MyCircularQueue(int k) {
        arr = new int[k];
        _k = k;
    }
    
    ~MyCircularQueue() {
		delete [] arr;
	}
    
    bool enQueue(int value) {
        if(isFull()) return false;
        last = (last + 1)%_k;
        arr[last] = value;
        sz++;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()) return false;
        front = (front + 1)%_k; 
        sz--;
        return true;
    }
    
    int Front() {
        return isEmpty()?-1:arr[front];
    }
    
    int Rear() {
        return isEmpty()?-1:arr[last];
    }
    
    bool isEmpty() {
        return sz==0?true:false;
    }
    
    bool isFull() {
        return sz == _k?true:false;
    }
};
